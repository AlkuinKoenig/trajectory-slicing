"0","```r
set.seed(50)#I like 50
#myHYS = readRDS(\"D:/slices.of.HYSPLIT_V2/slices.of.HYSPLIT/data/DARWIN_back_20d_run1/df/run_combined.rds\")%>%
  
#myHYS=readRDS(\"D:/slices.of.HYSPLIT_V2/slices.of.HYSPLIT/data/Maido_back_4d/run_combined.rds\")%>%
myHYS=readRDS(\"D:/slices.of.HYSPLIT_V2/slices.of.HYSPLIT/data/Mace_Head_back4d/run_combined.rds\")%>%
  #randomly selecting 5 trajectories.
  dplyr::filter(traj_dt_i %in% unique(.$traj_dt_i)[sample(1:length(unique(.$traj_dt_i)), 5, replace=FALSE)])%>%
  #adding angle and radius columns that are needed for radial slicing
  dplyr::mutate(get_polar_coords_geographical(lat,lon,lat_i,lon_i),.after=lon)%>%
  #creating ID colums that are needed for all slicing.
  dplyr::mutate(ID_time = format(traj_dt_i, '%Y%m%d%H'),
                ID_location = paste0(\"Y_\",lat_i,\"_X_\",lon_i,\"_E_\",height_i))

#estimating how much difference in latitude, longitude, and radius can be expected in one time step. 
#This is used to defined the \"delta_filter\" later. The goal is to save computational time. 
delta_filter_estimate = myHYS %>%
  dplyr::group_by(ID_time, ID_location)%>%
  dplyr::arrange(hour_along)%>%
  dplyr::summarise(across(.cols = c(\"radius\",\"lat\",\"lon\"), .fns = function(x){abs(x-lag(x,1))}, .names = \"{.col}_delta\"))%>%
  dplyr::ungroup()%>%
  dplyr::summarise_at(vars(contains(\"delta\")), function(x){quantile(x, 0.99,na.rm=TRUE)})
```"
"1","Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in dplyr 1.1.0.
i Please use `reframe()` instead.
i When switching from `summarise()` to `reframe()`, remember that `reframe()` always returns an ungrouped data frame and adjust accordingly.
Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.
"
"1","`summarise()` has grouped output by 'ID_time', 'ID_location'. You can override using the `.groups` argument.
"
"0","```r
delta_filter_estimate
```"
