"0","```r
set.seed(1000)
#myHYS_E3 = readRDS(\"D:/slices.of.HYSPLIT_V2/slices.of.HYSPLIT/data/DARWIN_back_20d_run1/df/run_combined.rds\")%>%
  
#myHYS_E3=readRDS(\"D:/slices.of.HYSPLIT_V2/slices.of.HYSPLIT/data/Maido_back_4d/run_combined.rds\")%>%
#myHYS_E3=readRDS(\"D:/slices.of.HYSPLIT_V2/slices.of.HYSPLIT/data/Mace_Head_back4d/run_combined.rds\")%>%
myHYS_E3=readRDS(\"D:/slices.of.HYSPLIT_V2/slices.of.HYSPLIT/data/V1_Cape_Point_5d/df/run_combined.rds\")%>%

  dplyr::mutate(get_polar_coords_geographical(lat,lon,lat_i,lon_i),.after=lon)%>%
  #as I'm emitting trajectories from one single point of emission, the time of emission is unique to each trajectory. I'm using it as ID here.
  dplyr::mutate(ID = traj_dt_i)%>%
  dplyr::filter(ID %in% sample(unique(.$ID), size = 3000, replace=FALSE))


#estimating how much difference in latitude, longitude, and radius can be expected in one time step. 
#This is used to defined the \"delta_filter\" later. The goal is to save computational time. 
delta_filter_estimate = myHYS_E3 %>%
  dplyr::group_by(ID)%>%  
  dplyr::arrange(hour_along)%>%
  dplyr::summarise(across(.cols = c(\"radius\",\"lat\",\"lon\"), .fns = function(x){abs(x-lag(x,1))}, .names = \"{.col}_delta\"))%>%
  dplyr::ungroup()%>%
  dplyr::summarise_at(vars(contains(\"delta\")), function(x){quantile(x, 0.99,na.rm=TRUE)})
```"
"1","Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in dplyr 1.1.0.
i Please use `reframe()` instead.
i When switching from `summarise()` to `reframe()`, remember that `reframe()` always returns an ungrouped data frame and adjust accordingly.
Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.
"
"1","`summarise()` has grouped output by 'ID'. You can override using the `.groups` argument.
"
"0","```r
delta_filter_estimate
```"
